const express = require('express');
const line = require('@line/bot-sdk');
const { createClient } = require('@supabase/supabase-js');

// 環境変数を利用（.env に定義）
const config = {
  channelAccessToken: process.env.CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.CHANNEL_SECRET
};

const supabase = createClient(
  'https://bteklaezhlfmjylybrlh.supabase.co',
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

const client = new line.Client(config);
const app = express();
app.use(express.json());

/**
 * Webアプリからタスク追加
 * Body: { task, userId, deadline: "YYYY-MM-DD HH:mm" }
 */
app.post('/add-task', async (req, res) => {
  const { task, userId, deadline } = req.body;
  const [date, time] = deadline?.split(' ') || [null, null];

  const { error } = await supabase
    .from('todos')
    .insert([{ task, userid: userId, date, time, status: '未完了' }]);

  if (error) {
    console.error('登録失敗:', error.message);
    return res.status(500).json({ error: 'DB保存失敗' });
  }

  // LINE通知（任意）
  try {
    if (userId && userId.startsWith('U')) {
      await client.pushMessage(userId, {
        type: 'text',
        text: `🆕 タスク追加: ${task}\n締切: ${date || '未定'} ${time || ''}`
      });
    }
  } catch (err) {
    console.warn('LINE通知失敗:', err.message);
  }

  res.json({ success: true });
});

/**
 * Webアプリからタスク一覧取得
 * Query: ?userId=xxx（任意）
 */
app.get('/get-tasks', async (req, res) => {
  const userId = req.query.userId || '';
  const query = supabase.from('todos').select('*').order('date', { ascending: true });

  const { data, error } = userId
    ? await query.eq('userid', userId)
    : await query;

  if (error) {
    console.error('取得失敗:', error.message);
    return res.status(500).json({ error: 'DB取得失敗' });
  }

  res.json(data);
});

/**
 * LINE webhook：進捗確認コマンドに応答
 */
app.post('/webhook', line.middleware(config), async (req, res) => {
  const events = req.body.events;

  for (const event of events) {
    if (event.type !== 'message' || event.message.type !== 'text') continue;

    const userId = event.source.userId;
    const text = event.message.text.trim();

    if (text === '進捗確認') {
      const { data, error } = await supabase
        .from('todos')
        .select('*')
        .eq('userid', userId)
        .order('date', { ascending: true });

      let replyText = '';

      if (error || !data || data.length === 0) {
        replyText = '現在タスクは登録されていません。';
      } else {
        replyText = data.map(t =>
          `✅ ${t.task}（${t.date || '未定'} ${t.time || ''}） - ${t.status}`
        ).join('\n');
      }

      await client.replyMessage(event.replyToken, {
        type: 'text',
        text: replyText
      });
    } else {
      await client.replyMessage(event.replyToken, {
        type: 'text',
        text: '「進捗確認」と送信するとタスク一覧を表示できます。'
      });
    }
  }

  res.sendStatus(200);
});

// 起動
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`🚀 Server running on port ${PORT}`);
});
